{
    "docs": [
        {
            "location": "/", 
            "text": "Bitski lets you build \nuser-friendly\n and \ncross-platform\n Ethereum apps. Using Bitski, you can build a decentralized app or game that feels just as easy to use as a standard app.\n\n\nWe provide you with access to the Ethereum network through our hosted nodes, and provide access to the user's wallet using OAuth. \nLearn More\n.\n\n\nShortcuts\n\n\n\n\nNeed an account? \nSign up here\n.\n\n\nLearn more how it works in our \noverview\n.\n\n\nReady to start building? Check out \ngetting started\n.\n\n\nGot questions? Chat with us in our \nDiscord\n.\n\n\n\n\nPlatforms\n\n\nWe have SDKs for easy integration with various platforms. You can find more information on each SDK below.\n\n\n\n\nJavaScript\n\n\niOS\n\n\n\n\nFAQ\n\n\nWe've compiled a list of common questions \nhere\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#shortcuts", 
            "text": "Need an account?  Sign up here .  Learn more how it works in our  overview .  Ready to start building? Check out  getting started .  Got questions? Chat with us in our  Discord .", 
            "title": "Shortcuts"
        }, 
        {
            "location": "/#platforms", 
            "text": "We have SDKs for easy integration with various platforms. You can find more information on each SDK below.   JavaScript  iOS", 
            "title": "Platforms"
        }, 
        {
            "location": "/#faq", 
            "text": "We've compiled a list of common questions  here .", 
            "title": "FAQ"
        }, 
        {
            "location": "/overview/", 
            "text": "What is Bitski\n\n\nBitski lets you build \nuser-friendly\n and \ncross-platform\n Ethereum apps. Using Bitski, you can build a decentralized app or game that feels just as easy to use as a standard app.\n\n\nAs a developer, you can:\n\n\n\n\nConnect to the Ethereum network through our hosted nodes\n\n\nRequest access to a user's address\n\n\nSubmit transactions for approval on behalf of a user\n\n\nCreate and manage a wallet for your app\n\n\nDeploy contracts through your app wallet\n\n\n\n\nAs a user, you can:\n\n\n\n\nUse Ethereum apps without installing any software\n\n\nStore ethereum assets in our secure wallet\n\n\nAccess wallet from any device\n\n\nManage access to any apps you connect\n\n\nRecover your account at any time\n\n\n\n\nHow it works\n\n\nWe use OAuth to provide access to a user's wallet. Through our SDK your app can request access to a users Bitski account. If permission is granted, your app can then use standard tools like web3.js to interact with the Ethereum network. Learn more in \nAuthentication\n.\n\n\nWhy Bitski?\n\n\nMuch easier onboarding\n\n\nYour users will not have to install any extra software to use your app. They can use it just like any other website or app. Once a user already has a Bitski account, they will be able to sign in with just 2 clicks!\n\n\nCross-platform\n\n\nSince our wallets are managed in the cloud instead of tied to a specific device, you can access them from anywhere without compromising security.\n\n\nSecured with hardware\n\n\nUnlike most current wallets which are stored locally on your computer, our wallets are stored in tamper-proof hardware signing modules. The keys never leave the hardware. We believe this is far more secure.\n\n\nFully recoverable accounts\n\n\nSince your wallet is tied to your user account, it can be recovered if you forget your password. This kind of recovery is more secure than writing down a recovery phrase.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#what-is-bitski", 
            "text": "Bitski lets you build  user-friendly  and  cross-platform  Ethereum apps. Using Bitski, you can build a decentralized app or game that feels just as easy to use as a standard app.", 
            "title": "What is Bitski"
        }, 
        {
            "location": "/overview/#as-a-developer-you-can", 
            "text": "Connect to the Ethereum network through our hosted nodes  Request access to a user's address  Submit transactions for approval on behalf of a user  Create and manage a wallet for your app  Deploy contracts through your app wallet", 
            "title": "As a developer, you can:"
        }, 
        {
            "location": "/overview/#as-a-user-you-can", 
            "text": "Use Ethereum apps without installing any software  Store ethereum assets in our secure wallet  Access wallet from any device  Manage access to any apps you connect  Recover your account at any time", 
            "title": "As a user, you can:"
        }, 
        {
            "location": "/overview/#how-it-works", 
            "text": "We use OAuth to provide access to a user's wallet. Through our SDK your app can request access to a users Bitski account. If permission is granted, your app can then use standard tools like web3.js to interact with the Ethereum network. Learn more in  Authentication .", 
            "title": "How it works"
        }, 
        {
            "location": "/overview/#why-bitski", 
            "text": "", 
            "title": "Why Bitski?"
        }, 
        {
            "location": "/overview/#much-easier-onboarding", 
            "text": "Your users will not have to install any extra software to use your app. They can use it just like any other website or app. Once a user already has a Bitski account, they will be able to sign in with just 2 clicks!", 
            "title": "Much easier onboarding"
        }, 
        {
            "location": "/overview/#cross-platform", 
            "text": "Since our wallets are managed in the cloud instead of tied to a specific device, you can access them from anywhere without compromising security.", 
            "title": "Cross-platform"
        }, 
        {
            "location": "/overview/#secured-with-hardware", 
            "text": "Unlike most current wallets which are stored locally on your computer, our wallets are stored in tamper-proof hardware signing modules. The keys never leave the hardware. We believe this is far more secure.", 
            "title": "Secured with hardware"
        }, 
        {
            "location": "/overview/#fully-recoverable-accounts", 
            "text": "Since your wallet is tied to your user account, it can be recovered if you forget your password. This kind of recovery is more secure than writing down a recovery phrase.", 
            "title": "Fully recoverable accounts"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Signing up\n\n\nThe first step is to make sure that you have a Bitski account. If you haven't done so already, \nsign up for an account\n. Your Bitski account is both your personal wallet, and your developer account.\n\n\nGetting a client ID\n\n\nAll apps that use the Bitski need to have their own client id. We use this id to keep track of permissions a user has granted you.\n\n\nWe're currently in private beta, so to get a client ID you must request access on our \ndeveloper portal\n. We will review your request and notify you by email once you are approved.\n\n\nConfiguring your client settings\n\n\nOnce you have a client id, you'll need to configure the settings for your app. You can do this from the \ndeveloper portal\n.\n\n\nThe most important setting here is the redirect url(s). We use this to ensure that only the domains you approve will be able to use your client id.\n\n\nFor more information on all the settings, see \nClient Settings\n.\n\n\nIntegrate with your app\n\n\nNow that you have a configured client id, you can start using our SDKs in your app. You'll want to follow the instructions for the particular SDK you're using:\n\n\n\n\nJavaScript\n\n\niOS\n\n\n\n\nFor web based apps, you'll need to be able to respond to the callback from our servers.\n\n\nIt's also important to consider the user experience for various states your user will be in. Our SDKs can tell you whether or not the user is currently logged in, and you should update your UI based on that information.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#signing-up", 
            "text": "The first step is to make sure that you have a Bitski account. If you haven't done so already,  sign up for an account . Your Bitski account is both your personal wallet, and your developer account.", 
            "title": "Signing up"
        }, 
        {
            "location": "/getting-started/#getting-a-client-id", 
            "text": "All apps that use the Bitski need to have their own client id. We use this id to keep track of permissions a user has granted you.  We're currently in private beta, so to get a client ID you must request access on our  developer portal . We will review your request and notify you by email once you are approved.", 
            "title": "Getting a client ID"
        }, 
        {
            "location": "/getting-started/#configuring-your-client-settings", 
            "text": "Once you have a client id, you'll need to configure the settings for your app. You can do this from the  developer portal .  The most important setting here is the redirect url(s). We use this to ensure that only the domains you approve will be able to use your client id.  For more information on all the settings, see  Client Settings .", 
            "title": "Configuring your client settings"
        }, 
        {
            "location": "/getting-started/#integrate-with-your-app", 
            "text": "Now that you have a configured client id, you can start using our SDKs in your app. You'll want to follow the instructions for the particular SDK you're using:   JavaScript  iOS   For web based apps, you'll need to be able to respond to the callback from our servers.  It's also important to consider the user experience for various states your user will be in. Our SDKs can tell you whether or not the user is currently logged in, and you should update your UI based on that information.", 
            "title": "Integrate with your app"
        }, 
        {
            "location": "/oauth/", 
            "text": "Instead of using a browser extension to provide your app a wallet, Bitski uses OAuth2 to connect you to the user and their wallet. OAuth is a great standard for securely sharing data between services.\n\n\nHow it works\n\n\nThe flow for using Bitski is a little different than with dapp browsers, and browser extensions.\n\n\nFirst, you should check to see if the user is already logged in. Our SDKs provide an easy way to do this. If the user is already logged in, you're done!\n\n\nIf the user is not already logged in, you'll want to handle this in your app somehow. We provide a drop in button component on web that will make this easy for you. This can be displayed where you currently show a prompt to install Metamask or other dapp browsers.\n\n\nOnce the user clicks \"Continue with Bitski\", they will be taken through our auth flow, and eventually redirected back to your app.\n\n\nFor users who already have a Bitski account, it's just 1-2 clicks to get started. For people who are new to Bitski, the sign up is designed to be quick and easy. We only ask for the bare essentials during this process.\n\n\nOAuth\n\n\nWhen you set up the SDK, you choose what permissions and data you want access to through \nscopes\n. By default our SDKs only request the \nopenid\n scope.\n\n\nThen, when a user visits your app for the first time and chooses to authenticate with their Bitski account, they will see the requested scopes. The user can then make a decision to approve all, some, or none of the scopes.\n\n\nOnce the user has made a decision to grant your app various permissions, they will be redirected back to your app at the \ncallback url\n that you specified. Note that the callback url specified from your client must match your url settings in the developer portal.\n\n\nThrough being redirected, you'll receive an authentication token that can be used to interact with Bitski's apis on behalf of the user.\n\n\nOur various SDKs automatically handle passing that authentication token to Web3, so most likely you won't need to do anything with the authentication token yourself.\n\n\nDuring subsequent sessions, the user will only be asked for permission again if the scopes you requested are different.\n\n\nAvailable Scopes\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nopenid\n\n\nAccess to the user's unique identifier.\n\n\n\n\n\n\nemail\n\n\nGives you access to the user's email address. Contact us to add this to your app.\n\n\n\n\n\n\noffline\n\n\nAllows your token to be renewed with a refresh token. This is required to have a session that lasts longer than 10 minutes. Contact us to add this to your app.", 
            "title": "Authentication"
        }, 
        {
            "location": "/oauth/#how-it-works", 
            "text": "The flow for using Bitski is a little different than with dapp browsers, and browser extensions.  First, you should check to see if the user is already logged in. Our SDKs provide an easy way to do this. If the user is already logged in, you're done!  If the user is not already logged in, you'll want to handle this in your app somehow. We provide a drop in button component on web that will make this easy for you. This can be displayed where you currently show a prompt to install Metamask or other dapp browsers.  Once the user clicks \"Continue with Bitski\", they will be taken through our auth flow, and eventually redirected back to your app.  For users who already have a Bitski account, it's just 1-2 clicks to get started. For people who are new to Bitski, the sign up is designed to be quick and easy. We only ask for the bare essentials during this process.", 
            "title": "How it works"
        }, 
        {
            "location": "/oauth/#oauth", 
            "text": "When you set up the SDK, you choose what permissions and data you want access to through  scopes . By default our SDKs only request the  openid  scope.  Then, when a user visits your app for the first time and chooses to authenticate with their Bitski account, they will see the requested scopes. The user can then make a decision to approve all, some, or none of the scopes.  Once the user has made a decision to grant your app various permissions, they will be redirected back to your app at the  callback url  that you specified. Note that the callback url specified from your client must match your url settings in the developer portal.  Through being redirected, you'll receive an authentication token that can be used to interact with Bitski's apis on behalf of the user.  Our various SDKs automatically handle passing that authentication token to Web3, so most likely you won't need to do anything with the authentication token yourself.  During subsequent sessions, the user will only be asked for permission again if the scopes you requested are different.", 
            "title": "OAuth"
        }, 
        {
            "location": "/oauth/#available-scopes", 
            "text": "Name  Description      openid  Access to the user's unique identifier.    email  Gives you access to the user's email address. Contact us to add this to your app.    offline  Allows your token to be renewed with a refresh token. This is required to have a session that lasts longer than 10 minutes. Contact us to add this to your app.", 
            "title": "Available Scopes"
        }, 
        {
            "location": "/client-settings/", 
            "text": "You can configure your app's settings from the \ndeveloper portal\n. Here some of the things you can configure, and what they mean.\n\n\nApp Info\n\n\nThis is metadata about your app that gives users more context. We will feature these details in our interface when we are presenting requests from your app or referencing your app.\n\n\nApproved Scopes\n\n\nThese are the scopes that clients using your \nclient id\n can request. By default \nopenid\n is the only scope that is approved. Requesting a scope that isn't approved for your app here will result in an error.\n\n\nCallback URLs\n\n\nThese are approved URLs that clients using your \nclient id\n can ask to be redirected to. It's important to keep this list as small as possible so malicious apps cannot pose as you. If a client asks to be redirected to a URL that is not on this list, they will receive an error.", 
            "title": "Client Settings"
        }, 
        {
            "location": "/client-settings/#app-info", 
            "text": "This is metadata about your app that gives users more context. We will feature these details in our interface when we are presenting requests from your app or referencing your app.", 
            "title": "App Info"
        }, 
        {
            "location": "/client-settings/#approved-scopes", 
            "text": "These are the scopes that clients using your  client id  can request. By default  openid  is the only scope that is approved. Requesting a scope that isn't approved for your app here will result in an error.", 
            "title": "Approved Scopes"
        }, 
        {
            "location": "/client-settings/#callback-urls", 
            "text": "These are approved URLs that clients using your  client id  can ask to be redirected to. It's important to keep this list as small as possible so malicious apps cannot pose as you. If a client asks to be redirected to a URL that is not on this list, they will receive an error.", 
            "title": "Callback URLs"
        }, 
        {
            "location": "/transactions/", 
            "text": "One of the main differences with using Bitski's wallet in your app over Metamask or other wallet providers is in the send transaction flow.\n\n\nHow it works\n\n\nWhen you submit a transaction via \nsendTransaction(...)\n, our SDK will pick up the transaction and show an approval dialog to the user. For security this approval dialog is hosted on Bitski's website. The user can then review the details of the transaction, and either approve it or reject it.\n\n\nOn the web, we show the dialog as a modal over your web app. On iOS, this happens in a Safari modal that displays over the native app.\n\n\nIf the user approves the transaction, Bitski will sign the transaction, submit it to the network, and return the transaction hash just like any other wallet. If the user declines the transaction, we will return an error.\n\n\nOptional fields\n\n\nBitski does not require all fields of a transaction to be submitted in order to process a transaction. The following fields are optional:\n\n\n\n\n\n\n\n\nName\n\n\nDefault behavior\n\n\n\n\n\n\n\n\n\n\nnonce\n\n\nBitski will calculate the next nonce for you.\n\n\n\n\n\n\ngasPrice\n\n\nBitski will calculate a gas price for you based on a the current averages.\n\n\n\n\n\n\n\n\nGas\n\n\nWe believe that most people don't want to have to think about gas and gas prices. They are confusing terms and concepts. In our transaction approval screen we display gas as a transaction fee, and don't currently offer the ability to customize it. This creates an experience that is more familiar to most people.", 
            "title": "Sending Transactions"
        }, 
        {
            "location": "/transactions/#how-it-works", 
            "text": "When you submit a transaction via  sendTransaction(...) , our SDK will pick up the transaction and show an approval dialog to the user. For security this approval dialog is hosted on Bitski's website. The user can then review the details of the transaction, and either approve it or reject it.  On the web, we show the dialog as a modal over your web app. On iOS, this happens in a Safari modal that displays over the native app.  If the user approves the transaction, Bitski will sign the transaction, submit it to the network, and return the transaction hash just like any other wallet. If the user declines the transaction, we will return an error.", 
            "title": "How it works"
        }, 
        {
            "location": "/transactions/#optional-fields", 
            "text": "Bitski does not require all fields of a transaction to be submitted in order to process a transaction. The following fields are optional:     Name  Default behavior      nonce  Bitski will calculate the next nonce for you.    gasPrice  Bitski will calculate a gas price for you based on a the current averages.", 
            "title": "Optional fields"
        }, 
        {
            "location": "/transactions/#gas", 
            "text": "We believe that most people don't want to have to think about gas and gas prices. They are confusing terms and concepts. In our transaction approval screen we display gas as a transaction fee, and don't currently offer the ability to customize it. This creates an experience that is more familiar to most people.", 
            "title": "Gas"
        }, 
        {
            "location": "/app-wallet/", 
            "text": "In addition to managing wallets for users of your dapp, Bitski can also manage a wallet for your dapp itself. This makes it much easier to manage funding, deploying, and migrating your dapp's contracts.\n\n\nOn top of that, you can use your app wallet to securely perform any transactions you want from your backend using OAuth.\n\n\nGetting a Client ID \n Secret\n\n\nWhile we are in private beta this is a manual process. You can request an app wallet here. Once we create one for you, you can visit the \nDeveloper Portal\n to see your credentials. Make sure to keep these keys a secret, because we will sign any transaction that is submitted using them.\n\n\nFunding your dev wallet\n\n\nThis is currently a manual process as well. We recommend buying ETH from a third-party such as \nCoinbase\n and sending it to your app wallet's address. You can find your address in the \nDeveloper Portal\n.\n\n\nDeploying Contracts with Truffle\n\n\nWe have a simple Truffle plugin that makes deploying contracts with your App Wallet easy. Read more about it \nhere\n.\n\n\nSubmitting transactions\n\n\nYou can also use standard Web3 apis on your backend to perform anything you want using your wallet. Here's how it works:\n\n\nFirst, you'll use your client id and secret to request an access token. This token has a short lifespan, so you'll probably want to perform this step before every request.\n\n\n// CURL EXAMPLE\n\n\n\n\nOnce you have an access token, you must add that to the Authorization header for your API request. We support all the standard Web3 JSON-RPC methods, so you can use any Web3 client to send these transactions.\n\n\n// CURL EXAMPLE\n\n\n\n\nAssuming your token is valid, your app wallet is funded, and the transaction is valid, it will be signed. There are currently no restrictions on what types of transactions will be signed, but we are considering this in the future.\n\n\nTransactions submitted via this API must include all fields with the exception of \nnonce\n.", 
            "title": "App Wallets"
        }, 
        {
            "location": "/app-wallet/#getting-a-client-id-secret", 
            "text": "While we are in private beta this is a manual process. You can request an app wallet here. Once we create one for you, you can visit the  Developer Portal  to see your credentials. Make sure to keep these keys a secret, because we will sign any transaction that is submitted using them.", 
            "title": "Getting a Client ID &amp; Secret"
        }, 
        {
            "location": "/app-wallet/#funding-your-dev-wallet", 
            "text": "This is currently a manual process as well. We recommend buying ETH from a third-party such as  Coinbase  and sending it to your app wallet's address. You can find your address in the  Developer Portal .", 
            "title": "Funding your dev wallet"
        }, 
        {
            "location": "/app-wallet/#deploying-contracts-with-truffle", 
            "text": "We have a simple Truffle plugin that makes deploying contracts with your App Wallet easy. Read more about it  here .", 
            "title": "Deploying Contracts with Truffle"
        }, 
        {
            "location": "/app-wallet/#submitting-transactions", 
            "text": "You can also use standard Web3 apis on your backend to perform anything you want using your wallet. Here's how it works:  First, you'll use your client id and secret to request an access token. This token has a short lifespan, so you'll probably want to perform this step before every request.  // CURL EXAMPLE  Once you have an access token, you must add that to the Authorization header for your API request. We support all the standard Web3 JSON-RPC methods, so you can use any Web3 client to send these transactions.  // CURL EXAMPLE  Assuming your token is valid, your app wallet is funded, and the transaction is valid, it will be signed. There are currently no restrictions on what types of transactions will be signed, but we are considering this in the future.  Transactions submitted via this API must include all fields with the exception of  nonce .", 
            "title": "Submitting transactions"
        }, 
        {
            "location": "/examples/", 
            "text": "These examples are a great way to quickly dive in and see how you can integrate Bitski into a dapp on the platforms we support. Both of these examples use the same contract and assets to demonstrate how you can use Bitski to build cross-platform dapps.\n\n\nWeb based Dapp\n\n\n\n\nVisit our demo here\n \nView the code\n\n\nRunning the example\n\n\nFirst, install the dependencies.\n\n\nnpm install\n\n\n\n\nNext, you'll need to use Truffle to deploy the contracts on one of Bitski's supported networks (Kovan or Rinkeby).\n\n\nInstall a local Ethereum node (Parity, or Geth), and configure your truffle.js to point at it, and run:\n\n\ntruffle migrate\n\n\n\n\nOnce the contracts are deployed, you can run to start the development server. You can learn more about deploying contracts with truffle here.\n\n\nnpm run dev\n\n\n\n\nThen browse to http://localhost:3000\n\n\n\n\niOS Dapp\n\n\n\n  \n\n  \n\n\n\n\n\nOur demo dapp is not available on the App Store yet, but you can still easily run it yourself from Xcode.\n\n\nView the code\n\n\nRunning the example\n\n\nYou'll need Xcode 9 and CocoaPods to build the example.\n\n\nStart by installing the dependencies.\n\n\npod install\n\n\n\n\nThen, simply open the workspace in Xcode and run the project.", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#web-based-dapp", 
            "text": "Visit our demo here   View the code", 
            "title": "Web based Dapp"
        }, 
        {
            "location": "/examples/#running-the-example", 
            "text": "First, install the dependencies.  npm install  Next, you'll need to use Truffle to deploy the contracts on one of Bitski's supported networks (Kovan or Rinkeby).  Install a local Ethereum node (Parity, or Geth), and configure your truffle.js to point at it, and run:  truffle migrate  Once the contracts are deployed, you can run to start the development server. You can learn more about deploying contracts with truffle here.  npm run dev  Then browse to http://localhost:3000", 
            "title": "Running the example"
        }, 
        {
            "location": "/examples/#ios-dapp", 
            "text": "Our demo dapp is not available on the App Store yet, but you can still easily run it yourself from Xcode.  View the code", 
            "title": "iOS Dapp"
        }, 
        {
            "location": "/examples/#running-the-example_1", 
            "text": "You'll need Xcode 9 and CocoaPods to build the example.  Start by installing the dependencies.  pod install  Then, simply open the workspace in Xcode and run the project.", 
            "title": "Running the example"
        }, 
        {
            "location": "/faq/", 
            "text": "Here are some answers to the questions we get asked most often.\n\n\nWhat networks do you support?\n\n\nBitski currently supports only the Kovan and Rinkeby test networks. However, we will have support for the main Ethereum network soon.\n\n\n\n\nHow much does Bitski charge?\n\n\nBitski is currently free of charge for users and developers.\n\n\n\n\nWhat are the benefits of Bitski managing key storage for new users?\n\n\nSecure key storage is very challenging, and a siloed approach will be inconvenient for your users. Users will have to fund this wallet separately, and can only manage their assets through your interface.\n\n\n\n\nHow should I integrate Bitski in my dapp?\n\n\nA great place to start is to put our sign in button wherever you're currently asking people to install Metamask.\n\n\n\n\nI already have an app that uses Metamask, can I use Bitski?\n\n\nThe Bitski SDK is designed to be compatible with other wallets and dapp browsers, while providing a great experience for users who don't already have a wallet. Learn more about integrating our JS SDK \nhere\n.\n\n\n\n\nHow are you storing and managing private keys?\n\n\nOur keys are both created and stored on our HSMs (Hardware Security Module). Approved transactions are passed to the HSM to sign. The keys never leave the hardware.\n\n\n\n\nDo you have an Android SDK?\n\n\nNot at the moment, but that is on our roadmap.\n\n\n\n\nHow will users fund their wallet?\n\n\nCurrently for ETH, users will need to use another service to purchase ETH with fiat currency, and transfer that to their Bitski wallet. We will eventually have a more integrated process.\n\n\nHowever, if you're working with digital assets, we suggest using our app wallet API to send assets to users directly. This prevents the need for the user to purchase ETH, while allowing them to have decentralized ownership.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#what-networks-do-you-support", 
            "text": "Bitski currently supports only the Kovan and Rinkeby test networks. However, we will have support for the main Ethereum network soon.", 
            "title": "What networks do you support?"
        }, 
        {
            "location": "/faq/#how-much-does-bitski-charge", 
            "text": "Bitski is currently free of charge for users and developers.", 
            "title": "How much does Bitski charge?"
        }, 
        {
            "location": "/faq/#what-are-the-benefits-of-bitski-managing-key-storage-for-new-users", 
            "text": "Secure key storage is very challenging, and a siloed approach will be inconvenient for your users. Users will have to fund this wallet separately, and can only manage their assets through your interface.", 
            "title": "What are the benefits of Bitski managing key storage for new users?"
        }, 
        {
            "location": "/faq/#how-should-i-integrate-bitski-in-my-dapp", 
            "text": "A great place to start is to put our sign in button wherever you're currently asking people to install Metamask.", 
            "title": "How should I integrate Bitski in my dapp?"
        }, 
        {
            "location": "/faq/#i-already-have-an-app-that-uses-metamask-can-i-use-bitski", 
            "text": "The Bitski SDK is designed to be compatible with other wallets and dapp browsers, while providing a great experience for users who don't already have a wallet. Learn more about integrating our JS SDK  here .", 
            "title": "I already have an app that uses Metamask, can I use Bitski?"
        }, 
        {
            "location": "/faq/#how-are-you-storing-and-managing-private-keys", 
            "text": "Our keys are both created and stored on our HSMs (Hardware Security Module). Approved transactions are passed to the HSM to sign. The keys never leave the hardware.", 
            "title": "How are you storing and managing private keys?"
        }, 
        {
            "location": "/faq/#do-you-have-an-android-sdk", 
            "text": "Not at the moment, but that is on our roadmap.", 
            "title": "Do you have an Android SDK?"
        }, 
        {
            "location": "/faq/#how-will-users-fund-their-wallet", 
            "text": "Currently for ETH, users will need to use another service to purchase ETH with fiat currency, and transfer that to their Bitski wallet. We will eventually have a more integrated process.  However, if you're working with digital assets, we suggest using our app wallet API to send assets to users directly. This prevents the need for the user to purchase ETH, while allowing them to have decentralized ownership.", 
            "title": "How will users fund their wallet?"
        }
    ]
}
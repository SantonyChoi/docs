{
    "docs": [
        {
            "location": "/", 
            "text": "Bitski lets you build \nuser-friendly\n and \ncross-platform\n Ethereum apps. Using Bitski, you can build a decentralized app or game that feels just as easy to use as a standard app.\n\n\nWe provide you with access to the Ethereum network through our hosted nodes, and provide access to the user's wallet using OAuth. \nLearn More\n.\n\n\nShortcuts\n\n\n\n\nNeed an account? \nSign up here\n.\n\n\nLearn more how it works in our \noverview\n.\n\n\nReady to start building? Check out \ngetting started\n.\n\n\nGot questions? Chat with us in our \nDiscord\n.\n\n\n\n\nPlatforms\n\n\nWe have SDKs for easy integration with various platforms. You can find more information on each SDK below.\n\n\n\n\nJavaScript\n\n\niOS\n\n\n\n\nFAQ\n\n\nWe've compiled a list of common questions \nhere\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#shortcuts", 
            "text": "Need an account?  Sign up here .  Learn more how it works in our  overview .  Ready to start building? Check out  getting started .  Got questions? Chat with us in our  Discord .", 
            "title": "Shortcuts"
        }, 
        {
            "location": "/#platforms", 
            "text": "We have SDKs for easy integration with various platforms. You can find more information on each SDK below.   JavaScript  iOS", 
            "title": "Platforms"
        }, 
        {
            "location": "/#faq", 
            "text": "We've compiled a list of common questions  here .", 
            "title": "FAQ"
        }, 
        {
            "location": "/overview/", 
            "text": "What is Bitski\n\n\nBitski makes it much easier to build and use Ethereum apps. Users can sign up for your app without needing to install any additional software, and they can use their account from any device.\n\n\nAs a developer, you can:\n\n\n\n\nConnect to the Ethereum network through our hosted nodes\n\n\nRequest access to a user's address\n\n\nSubmit transactions for approval on behalf of a user\n\n\nCreate and manage a wallet for your app\n\n\nDeploy contracts through your app wallet\n\n\n\n\nAs a user, you can:\n\n\n\n\nUse Ethereum apps without installing any software\n\n\nStore ethereum assets in our secure wallet\n\n\nManage access to any apps you connect\n\n\nRecover your account at any time\n\n\n\n\nHow it works\n\n\nWe use OAuth to provide access to a user's wallet. Through our SDK your app can request access to a users Bitski account. If permission is granted, your app can then use standard tools like web3.js to interact with the Ethereum network. Learn more in \nAuthentication\n.\n\n\nWhy Bitski?\n\n\nMuch easier onboarding\n\n\nYour users will not have to install any extra software to use your app. They can use it just like any other website or app. Once a user already has a Bitski account, they will be able to sign in with just 2 clicks!\n\n\nCross-platform\n\n\nSince our wallets are managed in the cloud instead of tied to a specific device, you can access them from anywhere without compromising security.\n\n\nSecured with hardware\n\n\nUnlike most current wallets which are stored locally on your computer, our wallets are stored in tamper-proof hardware signing modules. The keys never leave the hardware. We believe this is far more secure.\n\n\nFully recoverable accounts\n\n\nSince your wallet is tied to your user account, it can be recovered if you forget your password. This kind of recovery is more secure than writing down a recovery phrase.", 
            "title": "Overview"
        }, 
        {
            "location": "/overview/#what-is-bitski", 
            "text": "Bitski makes it much easier to build and use Ethereum apps. Users can sign up for your app without needing to install any additional software, and they can use their account from any device.", 
            "title": "What is Bitski"
        }, 
        {
            "location": "/overview/#as-a-developer-you-can", 
            "text": "Connect to the Ethereum network through our hosted nodes  Request access to a user's address  Submit transactions for approval on behalf of a user  Create and manage a wallet for your app  Deploy contracts through your app wallet", 
            "title": "As a developer, you can:"
        }, 
        {
            "location": "/overview/#as-a-user-you-can", 
            "text": "Use Ethereum apps without installing any software  Store ethereum assets in our secure wallet  Manage access to any apps you connect  Recover your account at any time", 
            "title": "As a user, you can:"
        }, 
        {
            "location": "/overview/#how-it-works", 
            "text": "We use OAuth to provide access to a user's wallet. Through our SDK your app can request access to a users Bitski account. If permission is granted, your app can then use standard tools like web3.js to interact with the Ethereum network. Learn more in  Authentication .", 
            "title": "How it works"
        }, 
        {
            "location": "/overview/#why-bitski", 
            "text": "", 
            "title": "Why Bitski?"
        }, 
        {
            "location": "/overview/#much-easier-onboarding", 
            "text": "Your users will not have to install any extra software to use your app. They can use it just like any other website or app. Once a user already has a Bitski account, they will be able to sign in with just 2 clicks!", 
            "title": "Much easier onboarding"
        }, 
        {
            "location": "/overview/#cross-platform", 
            "text": "Since our wallets are managed in the cloud instead of tied to a specific device, you can access them from anywhere without compromising security.", 
            "title": "Cross-platform"
        }, 
        {
            "location": "/overview/#secured-with-hardware", 
            "text": "Unlike most current wallets which are stored locally on your computer, our wallets are stored in tamper-proof hardware signing modules. The keys never leave the hardware. We believe this is far more secure.", 
            "title": "Secured with hardware"
        }, 
        {
            "location": "/overview/#fully-recoverable-accounts", 
            "text": "Since your wallet is tied to your user account, it can be recovered if you forget your password. This kind of recovery is more secure than writing down a recovery phrase.", 
            "title": "Fully recoverable accounts"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Signing up\n\n\nThe first step is to make sure that you have a Bitski account. If you haven't done so already, \nsign up for an account\n. Your Bitski account is both your personal wallet, and your developer account.\n\n\nGetting a client ID\n\n\nAll apps that use the Bitski need to have their own client id. We use this id to keep track of permissions a user has granted you.\n\n\nWe're currently in private beta, so to get a client ID you must request access on our \ndeveloper portal\n. We will review your request and notify you by email once you are approved.\n\n\nConfiguring your client settings\n\n\nOnce you have a client id, you'll need to configure the settings for your app. You can do this from the \ndeveloper portal\n.\nThe most important setting here is the redirect url(s). We use this to ensure that only the domains you approve will be able to use your client id.\n\n\nFor more information on all the settings, see \nClient Settings\n.\n\n\nIntegrate with your app\n\n\nNow that you have a configured client id, you can start using our SDKs in your app. You'll want to follow the instructions for the particular SDK you're using:\n\n\n\n\nJavaScript\n\n\niOS\n\n\n\n\nFor web based apps, you'll need to be able to respond to the callback from our servers.\n\n\nIt's also important to consider the user experience for various states your user will be in. Our SDKs can tell you whether or not the user is currently logged in, and you should update your UI based on that information.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#signing-up", 
            "text": "The first step is to make sure that you have a Bitski account. If you haven't done so already,  sign up for an account . Your Bitski account is both your personal wallet, and your developer account.", 
            "title": "Signing up"
        }, 
        {
            "location": "/getting-started/#getting-a-client-id", 
            "text": "All apps that use the Bitski need to have their own client id. We use this id to keep track of permissions a user has granted you.  We're currently in private beta, so to get a client ID you must request access on our  developer portal . We will review your request and notify you by email once you are approved.", 
            "title": "Getting a client ID"
        }, 
        {
            "location": "/getting-started/#configuring-your-client-settings", 
            "text": "Once you have a client id, you'll need to configure the settings for your app. You can do this from the  developer portal .\nThe most important setting here is the redirect url(s). We use this to ensure that only the domains you approve will be able to use your client id.  For more information on all the settings, see  Client Settings .", 
            "title": "Configuring your client settings"
        }, 
        {
            "location": "/getting-started/#integrate-with-your-app", 
            "text": "Now that you have a configured client id, you can start using our SDKs in your app. You'll want to follow the instructions for the particular SDK you're using:   JavaScript  iOS   For web based apps, you'll need to be able to respond to the callback from our servers.  It's also important to consider the user experience for various states your user will be in. Our SDKs can tell you whether or not the user is currently logged in, and you should update your UI based on that information.", 
            "title": "Integrate with your app"
        }, 
        {
            "location": "/oauth/", 
            "text": "Bitski uses OAuth2 to connect users and their wallets with your app. OAuth is a great standard for securely sharing data between services.\n\n\nHow it works\n\n\nAs a developer, you choose what permissions and data you want access to through \nscopes\n. By default our SDKs only request the profile scope.\n\n\nThen, when a user visits your app for the first time and chooses to authenticate with their Bitski account, they will see the requested scopes. The user can then make a decision to approve all, some, or none of the scopes.\n\n\nOnce the user has made a decision to grant your app various permissions, they will be redirected back to your app at the \ncallback url\n that you specified. Note that the callback url specified from your client must match your url settings in the developer portal.\n\n\nThrough being redirected, you'll receive an authentication token that can be used to interact with Bitski's apis on behalf of the user.\n\n\nOur various SDKs automatically handle passing that authentication token to Web3, so most likely you won't need to do anything with the authentication token yourself.\n\n\nAvailable Scopes\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nemail\n\n\nGives you access to the user's email address\n\n\n\n\n\n\noffline\n\n\nAllows your token to be renewed with a refresh token. This is required to have a session that lasts longer than 5 minutes.", 
            "title": "Authentication"
        }, 
        {
            "location": "/oauth/#how-it-works", 
            "text": "As a developer, you choose what permissions and data you want access to through  scopes . By default our SDKs only request the profile scope.  Then, when a user visits your app for the first time and chooses to authenticate with their Bitski account, they will see the requested scopes. The user can then make a decision to approve all, some, or none of the scopes.  Once the user has made a decision to grant your app various permissions, they will be redirected back to your app at the  callback url  that you specified. Note that the callback url specified from your client must match your url settings in the developer portal.  Through being redirected, you'll receive an authentication token that can be used to interact with Bitski's apis on behalf of the user.  Our various SDKs automatically handle passing that authentication token to Web3, so most likely you won't need to do anything with the authentication token yourself.", 
            "title": "How it works"
        }, 
        {
            "location": "/oauth/#available-scopes", 
            "text": "Name  Description      email  Gives you access to the user's email address    offline  Allows your token to be renewed with a refresh token. This is required to have a session that lasts longer than 5 minutes.", 
            "title": "Available Scopes"
        }, 
        {
            "location": "/client-settings/", 
            "text": "You can configure your app's settings from the \ndeveloper portal\n. Here some of the things you can configure, and what they mean.\n\n\nApp Info\n\n\nThis is metadata about your app that gives users more context. We will feature these details in our interface when we are presenting requests from your app or referencing your app.\n\n\nApproved Scopes\n\n\nThese are the scopes that clients using your \nclient id\n can request. Requesting a scope that isn't approved for your app here will result in an error.\n\n\nCallback URLs\n\n\nThese are approved URLs that clients using your \nclient id\n can ask to be redirected to. It's important to keep this list as small as possible so malicious apps cannot pose as you. If a client asks to be redirected to a URL that is not on this list, they will receive an error.", 
            "title": "Client Settings"
        }, 
        {
            "location": "/client-settings/#app-info", 
            "text": "This is metadata about your app that gives users more context. We will feature these details in our interface when we are presenting requests from your app or referencing your app.", 
            "title": "App Info"
        }, 
        {
            "location": "/client-settings/#approved-scopes", 
            "text": "These are the scopes that clients using your  client id  can request. Requesting a scope that isn't approved for your app here will result in an error.", 
            "title": "Approved Scopes"
        }, 
        {
            "location": "/client-settings/#callback-urls", 
            "text": "These are approved URLs that clients using your  client id  can ask to be redirected to. It's important to keep this list as small as possible so malicious apps cannot pose as you. If a client asks to be redirected to a URL that is not on this list, they will receive an error.", 
            "title": "Callback URLs"
        }, 
        {
            "location": "/examples/", 
            "text": "These examples are a great way to quickly dive in and see how you can integrate Bitski into a dapp on the platforms we support. Both of these examples use the same contract and assets to demonstrate how you can use Bitski to build cross-platform dapps.\n\n\nWeb based Dapp\n\n\n(Screenshot coming soon)\n\n\nVisit our demo here\n \nView the code\n\n\nRunning the example\n\n\nFirst, install the dependencies.\n\n\nnpm install\n\n\n\n\nNext, you'll need to use Truffle to deploy the contracts on one of Bitski's supported networks (Kovan or Rinkeby).\n\n\nInstall a local Ethereum node (Parity, or Geth), and configure your truffle.js to point at it, and run:\n\n\ntruffle migrate\n\n\n\n\nOnce the contracts are deployed, you can run to start the development server. You can learn more about deploying contracts with truffle here.\n\n\nnpm run dev\n\n\n\n\nThen browse to http://localhost:3000\n\n\n\n\niOS Dapp\n\n\n(Video coming soon)\n\n\nOur demo dapp is not available on the App Store yet, but you can still easily run it yourself from Xcode.\n\n\nView the code\n\n\nRunning the example\n\n\nYou'll need Xcode 9 and CocoaPods to build the example.\n\n\nStart by installing the dependencies.\n\n\npod install\n\n\n\n\nThen, simply open the workspace in Xcode and run the project.", 
            "title": "Examples"
        }, 
        {
            "location": "/examples/#web-based-dapp", 
            "text": "(Screenshot coming soon)  Visit our demo here   View the code", 
            "title": "Web based Dapp"
        }, 
        {
            "location": "/examples/#running-the-example", 
            "text": "First, install the dependencies.  npm install  Next, you'll need to use Truffle to deploy the contracts on one of Bitski's supported networks (Kovan or Rinkeby).  Install a local Ethereum node (Parity, or Geth), and configure your truffle.js to point at it, and run:  truffle migrate  Once the contracts are deployed, you can run to start the development server. You can learn more about deploying contracts with truffle here.  npm run dev  Then browse to http://localhost:3000", 
            "title": "Running the example"
        }, 
        {
            "location": "/examples/#ios-dapp", 
            "text": "(Video coming soon)  Our demo dapp is not available on the App Store yet, but you can still easily run it yourself from Xcode.  View the code", 
            "title": "iOS Dapp"
        }, 
        {
            "location": "/examples/#running-the-example_1", 
            "text": "You'll need Xcode 9 and CocoaPods to build the example.  Start by installing the dependencies.  pod install  Then, simply open the workspace in Xcode and run the project.", 
            "title": "Running the example"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Learn how to build your own decentralized app on Ethereum using Bitski. We'll walk you through the process step by step.\n\n\nCrafting your idea\n\n\n\n\nThinking decentralized\n\n\n\n\nGet the tools\n\n\n\n\nTruffle\n\n\nWebpack\n\n\nSolidity plugin for editor\n\n\nBitski SDK\n\n\n\n\nWrite your contract\n\n\n\n\nSolidity\n\n\n\n\nBuild the interface\n\n\n\n\nWebpack\n\n\n\n\nTest your app\n\n\n\n\nTruffle test?\n\n\nRunning locally?\n\n\n\n\nDeploy it to the network\n\n\n\n\nApp wallet \n truffle config\n\n\n\n\nDeploy your interface\n\n\n\n\nHeroku?", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#crafting-your-idea", 
            "text": "Thinking decentralized", 
            "title": "Crafting your idea"
        }, 
        {
            "location": "/tutorial/#get-the-tools", 
            "text": "Truffle  Webpack  Solidity plugin for editor  Bitski SDK", 
            "title": "Get the tools"
        }, 
        {
            "location": "/tutorial/#write-your-contract", 
            "text": "Solidity", 
            "title": "Write your contract"
        }, 
        {
            "location": "/tutorial/#build-the-interface", 
            "text": "Webpack", 
            "title": "Build the interface"
        }, 
        {
            "location": "/tutorial/#test-your-app", 
            "text": "Truffle test?  Running locally?", 
            "title": "Test your app"
        }, 
        {
            "location": "/tutorial/#deploy-it-to-the-network", 
            "text": "App wallet   truffle config", 
            "title": "Deploy it to the network"
        }, 
        {
            "location": "/tutorial/#deploy-your-interface", 
            "text": "Heroku?", 
            "title": "Deploy your interface"
        }, 
        {
            "location": "/faq/", 
            "text": "Here are some answers to the questions we get asked most often.\n\n\nWhat's your policy on information/user ownership?\n\n\nComing soon.\n\n\n\n\nHow much does Bitski charge?\n\n\nBitski is currently free of charge for users and developers.\n\n\n\n\nIs Bitski open source?\n\n\nWe are partially open source. Our SDKs are open source, but the code that powers our website and infrastructure is primarily not.\n\n\n\n\nWhy should I not just do my own key storage for new users?\n\n\nSecure key storage is very challenging, and a siloed approach will be inconvenient for your users. Users will have to fund this wallet separately, and can only manage their assets through your interface.\n\n\n\n\nCan I use my Bitski account with Dapps that do not use the Bitski SDK?\n\n\nCurrently no. This is something we are planning to address with a browser extension soon.\n\n\n\n\nHow much can I brand the Bitski transaction flow\n\n\nCurrently there is no customization of the transaction flow.\n\n\n\n\nI already have an app that uses Metamask, can I use Bitski?\n\n\nYes, they can. It doesn't negate any other wallet. It improves the dapp experience.\n\n\n\n\nHow do I submit my dApp for Bitski?\n\n\nYou can request access from our Developer Portal.\n\n\n\n\nHow are you storing private keys?\n\n\nOur keys are both created and stored on our HSMs (Hardware Security Module). Approved transactions are passed to the HSM to sign. The keys never leave the hardware.\n\n\n\n\nDo you have an Android SDK?\n\n\nNot at the moment, but that is on our roadmap.\n\n\n\n\nHow should I integrate Bitski in my dapp?\n\n\nA good place to start is to put our sign in button wherever you're currently asking people to install Metamask.\n\n\n\n\nHow much lock in is there when building with Bitski?\n\n\nBitski has about as much lock in as other wallet providers. Since your users will presumably store assets from your app in our wallet, they will need Bitski to continue to use those assets. However, if the asset is transferrable, the user could decide to move them to another wallet instead.\n\n\n\n\nCan Bitski use ENS or Namecoin or other public naming systems?\n\n\nCurrently our wallet does not support sending to ENS names, or other public naming systems.\n\n\n\n\nCan I use Infura with Bitski?\n\n\nBitski provides the same services that Infura provides, so that would not be necessary.\n\n\n\n\nHow will users fund their wallet?\n\n\nFor ETH, currently they will need to use another service to purchase ETH with fiat currency, and transfer that to their Bitski wallet. Eventually we'll have a more integrated process.\n\n\nHowever, if you're working with digital assets, we suggest using our app wallet API to send assets to users directly. This prevents the need for the user to purchase ETH, while allowing them to have decentralized ownership.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/#whats-your-policy-on-informationuser-ownership", 
            "text": "Coming soon.", 
            "title": "What's your policy on information/user ownership?"
        }, 
        {
            "location": "/faq/#how-much-does-bitski-charge", 
            "text": "Bitski is currently free of charge for users and developers.", 
            "title": "How much does Bitski charge?"
        }, 
        {
            "location": "/faq/#is-bitski-open-source", 
            "text": "We are partially open source. Our SDKs are open source, but the code that powers our website and infrastructure is primarily not.", 
            "title": "Is Bitski open source?"
        }, 
        {
            "location": "/faq/#why-should-i-not-just-do-my-own-key-storage-for-new-users", 
            "text": "Secure key storage is very challenging, and a siloed approach will be inconvenient for your users. Users will have to fund this wallet separately, and can only manage their assets through your interface.", 
            "title": "Why should I not just do my own key storage for new users?"
        }, 
        {
            "location": "/faq/#can-i-use-my-bitski-account-with-dapps-that-do-not-use-the-bitski-sdk", 
            "text": "Currently no. This is something we are planning to address with a browser extension soon.", 
            "title": "Can I use my Bitski account with Dapps that do not use the Bitski SDK?"
        }, 
        {
            "location": "/faq/#how-much-can-i-brand-the-bitski-transaction-flow", 
            "text": "Currently there is no customization of the transaction flow.", 
            "title": "How much can I brand the Bitski transaction flow"
        }, 
        {
            "location": "/faq/#i-already-have-an-app-that-uses-metamask-can-i-use-bitski", 
            "text": "Yes, they can. It doesn't negate any other wallet. It improves the dapp experience.", 
            "title": "I already have an app that uses Metamask, can I use Bitski?"
        }, 
        {
            "location": "/faq/#how-do-i-submit-my-dapp-for-bitski", 
            "text": "You can request access from our Developer Portal.", 
            "title": "How do I submit my dApp for Bitski?"
        }, 
        {
            "location": "/faq/#how-are-you-storing-private-keys", 
            "text": "Our keys are both created and stored on our HSMs (Hardware Security Module). Approved transactions are passed to the HSM to sign. The keys never leave the hardware.", 
            "title": "How are you storing private keys?"
        }, 
        {
            "location": "/faq/#do-you-have-an-android-sdk", 
            "text": "Not at the moment, but that is on our roadmap.", 
            "title": "Do you have an Android SDK?"
        }, 
        {
            "location": "/faq/#how-should-i-integrate-bitski-in-my-dapp", 
            "text": "A good place to start is to put our sign in button wherever you're currently asking people to install Metamask.", 
            "title": "How should I integrate Bitski in my dapp?"
        }, 
        {
            "location": "/faq/#how-much-lock-in-is-there-when-building-with-bitski", 
            "text": "Bitski has about as much lock in as other wallet providers. Since your users will presumably store assets from your app in our wallet, they will need Bitski to continue to use those assets. However, if the asset is transferrable, the user could decide to move them to another wallet instead.", 
            "title": "How much lock in is there when building with Bitski?"
        }, 
        {
            "location": "/faq/#can-bitski-use-ens-or-namecoin-or-other-public-naming-systems", 
            "text": "Currently our wallet does not support sending to ENS names, or other public naming systems.", 
            "title": "Can Bitski use ENS or Namecoin or other public naming systems?"
        }, 
        {
            "location": "/faq/#can-i-use-infura-with-bitski", 
            "text": "Bitski provides the same services that Infura provides, so that would not be necessary.", 
            "title": "Can I use Infura with Bitski?"
        }, 
        {
            "location": "/faq/#how-will-users-fund-their-wallet", 
            "text": "For ETH, currently they will need to use another service to purchase ETH with fiat currency, and transfer that to their Bitski wallet. Eventually we'll have a more integrated process.  However, if you're working with digital assets, we suggest using our app wallet API to send assets to users directly. This prevents the need for the user to purchase ETH, while allowing them to have decentralized ownership.", 
            "title": "How will users fund their wallet?"
        }
    ]
}